[{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\CartController.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":15,"column":11,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":16,"endColumn":1,"fix":{"range":[386,386],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":17,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":18,"endColumn":1,"fix":{"range":[396,396],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":31,"column":11,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":32,"endColumn":1,"fix":{"range":[777,777],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":33,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":34,"endColumn":1,"fix":{"range":[787,787],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":37,"column":93,"nodeType":"VariableDeclaration","messageId":"missingSemi","endLine":38,"endColumn":1,"fix":{"range":[941,941],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":49,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":50,"endColumn":1,"fix":{"range":[1182,1182],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":54,"column":68,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":55,"endColumn":1,"fix":{"range":[1312,1312],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":68,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":69,"endColumn":1,"fix":{"range":[1560,1560],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":72,"column":68,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":73,"endColumn":1,"fix":{"range":[1688,1688],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":86,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","fix":{"range":[1936,1936],"text":";"}}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":10,"fixableWarningCount":0,"source":"const CartModel =require(\"../models/CartModel\");\r\n\r\nexports.createItems = async (req,res)=>{\r\n    try{\r\n        const item = await CartModel.create(req.body);\r\n        res.status(201).json({\r\n            status:\"Success\",\r\n            data:item\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        })\r\n    }\r\n}\r\n\r\nexports.deleteSingleItem = async (req,res)=>{\r\n    try{\r\n        await CartModel.findOneAndDelete({userId:req.params.userId, _id:req.params.cartId});\r\n        res.status(204).json({\r\n            status:\"Success\",\r\n            data:null\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        })\r\n    }\r\n}\r\n\r\nexports.getAllUserCartItems= async(req,res)=>{\r\n    try{\r\n        const orders = await CartModel.find({userId: req.params.userId}).populate(\"product\")\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data:orders\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexports.deleteAllCartItems= async(req,res)=>{\r\n    try{\r\n            await CartModel.deleteMany({userId: req.params.userId})\r\n        res.status(204).json({\r\n            status:\"Success\",\r\n            data:null,\r\n        });\r\n    }\r\n\r\n    \r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\nexports.deleteAllCartItems= async(req,res)=>{\r\n    try{\r\n            await CartModel.deleteMany({userId: req.params.userId})\r\n        res.status(204).json({\r\n            status:\"Success\",\r\n            data:null,\r\n        });\r\n    }\r\n\r\n    \r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\OrderController.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":17,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":18,"endColumn":1,"fix":{"range":[403,403],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":22,"column":107,"nodeType":"VariableDeclaration","messageId":"missingSemi","endLine":23,"endColumn":1,"fix":{"range":[568,568],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":34,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":35,"endColumn":1,"fix":{"range":[814,814],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":38,"column":95,"nodeType":"VariableDeclaration","messageId":"missingSemi","endLine":39,"endColumn":1,"fix":{"range":[967,967],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":50,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","fix":{"range":[1208,1208],"text":";"}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"const OrderModel = require(\"../models/OrderModel\");\r\n\r\nexports.createOrders = async(req,res)=>{\r\n    try{\r\n        const order = await OrderModel.create(req.body);\r\n        res.status(201).json({\r\n            status:\"Success\",\r\n            data:order\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexports.getSingleOrder= async(req,res)=>{\r\n    try{\r\n        const singleOrder = await OrderModel.findOne({userId: req.params.userId, _id: req.params.orderId})\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data:singleOrder\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\nexports.getAllUserOrders= async(req,res)=>{\r\n    try{\r\n        const orders = await OrderModel.find({userId: req.params.userId}).populate(\"products\")\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data:orders\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\ProductController.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":7,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":29,"fix":{"range":[230,239],"text":"\"Success\""}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":9,"column":11,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":10,"endColumn":1,"fix":{"range":[279,279],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":33,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":34,"endColumn":1,"fix":{"range":[746,746],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":49,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":50,"endColumn":1,"fix":{"range":[1125,1125],"text":";"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"const ProductModel = require(\"../models/ProductsModel\");\r\n\r\nexports.createProducts = async (req,res) => {\r\n    try{\r\n        const product = await ProductModel.create(req.body);\r\n        res.status(201).json({\r\n            status:'Success',\r\n            data:product,\r\n        })\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n};\r\n\r\nexports.getProducts = async (req,res)=>{\r\n    try{\r\n    const products = await ProductModel.find();\r\n    res.status(200).json({\r\n        status:\"Success\",\r\n        data:products\r\n    });\r\n}\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\nexports.getSingleProduct = async(req,res)=>{\r\n    try{\r\n        const getProduct = await ProductModel.findById(req.params.id);\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data:getProduct\r\n        });\r\n        }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\nfunction add2Number(){\r\n\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\UserController.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":10,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":10,"endColumn":29,"fix":{"range":[361,370],"text":"\"Success\""}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":20,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":21,"endColumn":1,"fix":{"range":[548,548],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":36,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","endLine":37,"endColumn":1,"fix":{"range":[909,909],"text":";"}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":58,"column":2,"nodeType":"ExpressionStatement","messageId":"missingSemi","fix":{"range":[1651,1651],"text":";"}}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"const UserModel = require(\"../models/UserModel\");\r\n\r\nexports.createUsers = async (req,res) =>{\r\n    try{\r\n        if(req.body.password !== req.body.confirmPassword){\r\n            throw new Error(\"password and confirm password are not same\");\r\n        }\r\n        const user = await UserModel.create(req.body);\r\n        res.status(201).json({\r\n            status:'Success',\r\n            data:user\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error: err.message\r\n        });\r\n    }\r\n}\r\n\r\nexports.getUser = async (req,res) =>{\r\n    try{\r\n        const getUsers = await UserModel.findById(req.params.id);\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data:getUsers\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexports.handleSignIn = async (req,res) =>{\r\n    try{\r\n        //we r finding the one record with email id in users collection \r\n        const getUser = await UserModel.findOne({emailId: req.body.emailId});\r\n        if(!getUser  || getUser.password !== req.body.password){\r\n            throw new Error(\"Incorrect email or password\");\r\n        }\r\n        const {_id,  firstName,lastName, address, phoneNumber, gender, emailId} = getUser;\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data: {_id,  firstName,lastName, emailId, address, phoneNumber, gender}\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}","usedDeprecatedRules":[]}]