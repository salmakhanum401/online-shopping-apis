[{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\CartController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\OrderController.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\ProductController.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":7,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":29,"fix":{"range":[230,239],"text":"\"Success\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const ProductModel = require(\"../models/ProductsModel\");\r\n\r\nexports.createProducts = async (req,res) => {\r\n    try{\r\n        const product = await ProductModel.create(req.body);\r\n        res.status(201).json({\r\n            status:'Success',\r\n            data:product,\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n};\r\n\r\nexports.getProducts = async (req,res)=>{\r\n    try{\r\n    const products = await ProductModel.find();\r\n    res.status(200).json({\r\n        status:\"Success\",\r\n        data:products\r\n    });\r\n}\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\nexports.getSingleProduct = async(req,res)=>{\r\n    try{\r\n        const getProduct = await ProductModel.findById(req.params.id);\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data:getProduct\r\n        });\r\n        }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\nfunction add2Number(){\r\n\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\salma.khanum\\Desktop\\back-end\\controller\\UserController.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use doublequote.","line":10,"column":20,"nodeType":"Literal","messageId":"wrongQuotes","endLine":10,"endColumn":29,"fix":{"range":[361,370],"text":"\"Success\""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"const UserModel = require(\"../models/UserModel\");\r\n\r\nexports.createUsers = async (req,res) =>{\r\n    try{\r\n        if(req.body.password !== req.body.confirmPassword){\r\n            throw new Error(\"password and confirm password are not same\");\r\n        }\r\n        const user = await UserModel.create(req.body);\r\n        res.status(201).json({\r\n            status:'Success',\r\n            data:user\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error: err.message\r\n        });\r\n    }\r\n}\r\n\r\nexports.getUser = async (req,res) =>{\r\n    try{\r\n        const getUsers = await UserModel.findById(req.params.id);\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data:getUsers\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexports.handleSignIn = async (req,res) =>{\r\n    try{\r\n        //we r finding the one record with email id in users collection \r\n        const getUser = await UserModel.findOne({emailId: req.body.emailId});\r\n        if(!getUser  || getUser.password !== req.body.password){\r\n            throw new Error(\"Incorrect email or password\");\r\n        }\r\n        const {_id,  firstName,lastName, address, phoneNumber, gender, emailId} = getUser;\r\n        res.status(200).json({\r\n            status:\"Success\",\r\n            data: {_id,  firstName,lastName, emailId, address, phoneNumber, gender}\r\n        });\r\n    }\r\n    catch(err){\r\n        res.status(400).json({\r\n            status:\"Failed\",\r\n            error:err.message\r\n        });\r\n    }\r\n}","usedDeprecatedRules":[]}]